<!--================HTML=================================-->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Weather</title>
    <!--link href="/styles.css" rel="stylesheet" ref="text/css" /-->
  </head>
  <body>
    <div class="clock">
      <p></p>
      <p></p>
    </div>
    <h1>week stuff</h1>
    <ul id="daily-forcast"></ul>
    <h1>hour stuff</h1>
    <ul id="hr-forcast"></ul>

    <!--====================JAVASCRIPT=======================-->
    <!--<script type="text/javascript" src="../apiKeys/Keys"></script>-->
    <script>
      window.addEventListener("load", () => {
        let long;
        let lat;
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition((position) => {
            long = position.coords.longitude;
            lat = position.coords.latitude;
            //const key = apiKey
            //console.log(key)
            const KEY = "54edd9c1bbf1ba4d15adb1abeaf06736";
            var proxy = "https://cors-anywhere.herokuapp.com/";
            var api = `${proxy}https://api.darksky.net/forecast/${KEY}/${lat},${long}`;
            fetch(api)
              .then((response) => {
                return response.json();
              })
              .then((data) => {
                const date = new Date();

                //vars to set clock
                let minutes = date.getMinutes();
                let currentHour = date.getHours();
                if(currentHour >=12) {
                  let amPm = ' PM'
                } else {
                  amPm = ' AM'
                }

                //converts 24hr to 12hr format
                adjustHour = (hourNum) => {
                  if(hourNum == 0) {
                    hourNum = 12
                  }
                  if (hourNum >= 12) {
                    hourNum = ((hourNum + 11) % 12) + 1;
                  } else {
                    hourNum = hourNum
                  }
                  return hourNum;
                };
              
                //format minutes
                addZero = (num) => {
                  if (num <= 10) {
                    return ":" + "0" + num;
                  } else {
                    return " :" + num;
                  }
                };

                //display current time
                const setClock = document.querySelectorAll(".clock");
                setClock.forEach((setClock) => {
                  console.log(currentHour)
                  setClock.children[0].textContent = adjustHour(currentHour);
                  setClock.children[1].textContent = addZero(minutes + amPm);
                });

                //DarkSky Api Data
                const hourlyForcastData = data.hourly.data;
                const weeklyForcastData = data.daily.data;
                const currentIcon = data.currently.icon;

                // define current day number
                const currentDay = date.getDay();

                let weekdays = [
                  "Sunday",
                  "Monday",
                  "Tuesday",
                  "Wednesday",
                  "Thursday",
                  "Friday",
                  "Saturday",
                ];

                // function to adjust day text in ui for weekly forcast
                getNext7Days = (currentDay) => {
                  var next7Days = [];
                  for (var i = 1; i <= 8; i++) {
                    let dayNumber = currentDay + i;
                    let adjustedDayNumber = 0;
                    if (dayNumber >= weekdays.length) {
                      adjustedDayNumber = dayNumber - weekdays.length;
                    } else {
                      adjustedDayNumber = dayNumber;
                    }
                    let day = weekdays[adjustedDayNumber];
                    next7Days.push(day);
                  }
                  return next7Days;
                };

                //function to generate list items
                createListItem = (text) => {
                  let li = document.createElement("li");
                  li.textContent = text;
                  return li;
                };

                //get html elements to append data to
                const dailyForcast = document.getElementById("daily-forcast");
                const hrForcast = document.getElementById("hr-forcast");
                //tempory to make ui easier to look at for now
                const space = " ------------------";

                //loop api and create dom elements from api data
                for (let i = 0; i < weeklyForcastData.length; i++) {
                  const dailyWind = weeklyForcastData[i].windSpeed;
                  let dailyTemp = weeklyForcastData[i].temperatureHigh;
                  const nextDay = getNext7Days(currentDay);

                  dailyForcast.appendChild(createListItem(nextDay[i]));
                  dailyForcast.appendChild(createListItem(dailyWind + "MPH"));
                  dailyForcast.appendChild(createListItem(dailyTemp + "F"));
                  dailyForcast.appendChild(createListItem(space));
                  //dailyForcast.children.style.classList.add('add-border')
                }
                for (let i = 0; i < hourlyForcastData.length; i++) {
                  const hrWind = hourlyForcastData[i].windSpeed;
                  const hrTemp = hourlyForcastData[i].temperature;
                  const hrSummary = hourlyForcastData[i].summary;
                  hrForcast.appendChild(
                    createListItem(adjustHour(currentHour++))
                  );
                  hrForcast.appendChild(createListItem(hrSummary));
                  hrForcast.appendChild(createListItem(hrWind + "MPH"));
                  hrForcast.appendChild(createListItem(hrTemp + "F"));
                  hrForcast.appendChild(createListItem(space));
                }

                //change bg for current icon
                changeBackGround = (icon) => {
                  let body = document.querySelector("body");
                  body.classList.add(icon);
                };
                changeBackGround(currentIcon);
              });
          });
        }
      });
    </script>

    <!--===================CSS=======================-->
    <style>
      * {
        list-style: none;
      }

      #hr-forcast {
        border: 2px solid white;
      }

      #daily-forcast :first-child {
        border: 2px solid black;
      }

      .add-border {
        border: 2px solid red;
      }

      .clock {
        width: 100%;
        border: 2px solid red;
        text-align: center;
        justify-content: center;
        display: flex;
        align-content: space-between;
      }

      .cloudy,
      .partly-cloudy-day {
        background: #27282b;
        background: -webkit-linear-gradient(left, #27282b, #5c5051);
        background: -moz-linear-gradient(left, #27282b, #5c5051);
        background: linear-gradient(to right, #27282b, #5c5051);
        color: white;
      }

      .rain {
        background-color: gray;
      }

      .clear-day {
        background: #ffe216;
        background: -webkit-linear-gradient(left, #ffe216, #9ce9d3);
        background: -moz-linear-gradient(left, #ffe216, #9ce9d3);
        background: linear-gradient(to right, #ffe216, #9ce9d3);
        color: black;
      }

      .default-bg {
        background: aqua;
      }

      .rain {
        background-image: url("/rain.jpg");
      }

      .partly-cloudy-night {
        background: #083994;
        background: -webkit-linear-gradient(left, #083994, #000000);
        background: -moz-linear-gradient(left, #083994, #000000);
        background: linear-gradient(to right, #083994, #000000);
        color: white;
      }

      .snow {
        background: #c2c7d0;
        background: -webkit-linear-gradient(left, #c2c7d0, #252222);
        background: -moz-linear-gradient(left, #c2c7d0, #252222);
        background: linear-gradient(to right, #c2c7d0, #252222);
      }

      .clear-night {
        background: #232420;
        background: -webkit-linear-gradient(top left, #232420, #1c3553);
        background: -moz-linear-gradient(top left, #232420, #1c3553);
        background: linear-gradient(to bottom right, #232420, #1c3553);
        color: white;
      }
    </style>
  </body>
</html>
